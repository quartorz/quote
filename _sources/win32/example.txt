==
例
==

.. _ex-win32-simplest-window:

最も単純なウィンドウ
====================

.. sourcecode:: cpp
   :linenos:

   #include <quote/quote.hpp>
   #include <quote/win32/message_loop.hpp>
   #include <quote/win32/window.hpp>
   #include <quote/win32/procs.hpp>
   #include <quote/win32/creator.hpp>
   using namespace quote;
   
   class mywindow:
       public win32::window<
           mywindow,
           win32::quit_on_close<mywindow>>,
       public win32::creator<mywindow>
   {
   public:
       static const wchar_t *get_class_name()
       {
           return L"mywindow";
       }
       bool initialize()
       {
           // 初期化(ウィンドウを作成した時に呼ばれる)
           return true;
       }
       void uninitialize()
       {
           // 後処理(ウィンドウが破棄されるときに呼ばれる)
       }
   };

   int run()
   {
       if(!mywindow::register_class())
           return 0;

       mywindow window;
       if(!window.create(nullptr, L"sample", INT_MAX, INT_MAX, 800, 600))
           return 0;
       window.show();

       return win32::message_loop();
   }

   QUOTE_DEFINE_MAIN

* :ref:`win32-window`
* :ref:`win32-creator`
* :ref:`win32-quit_on_close`

.. _ex-win32-window-size-move:

サイズ変更時と移動時に標準出力にメッセージを表示するウィンドウ
==============================================================

.. sourcecode:: cpp
   :linenos:

   #include <iostream>

   #include <quote/quote.hpp>
   #include <quote/win32/message_loop.hpp>
   #include <quote/win32/window.hpp>
   #include <quote/win32/procs.hpp>
   #include <quote/win32/creator.hpp>
   using namespace quote;
   
   class mywindow:
       public win32::window<
           mywindow,
           win32::quit_on_close<mywindow>,
           win32::resizer<mywindow>,
           win32::mover<mywindow>>,
       public win32::creator<mywindow>
   {
   public:
       static const wchar_t *get_class_name()
       {
           return L"mywindow";
       }
       bool initialize()
       {
           return true;
       }
       void uninitialize()
       {
       }
       void on_size(int w, int h)
       {
           std::cout << "on size width:" << w << " height:" << h << std::endl;
       }
       void on_move(int x, int y)
       {
           std::cout << "on move x:" << x << " y:" << y << std::endl;
       }
   };

   int run()
   {
       if(!mywindow::register_class())
           return 0;

       mywindow window;
       if(!window.create(nullptr, L"sample", INT_MAX, INT_MAX, 800, 600))
           return 0;
       window.show();

       return win32::message_loop();
   }

   QUOTE_DEFINE_MAIN
