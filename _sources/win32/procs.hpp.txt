========
proc.hpp
========

.. _win32-resizer:

resizerクラス
=============

宣言
----

.. sourcecode:: cpp

   template <class Derived>
   class resizer;

概要
----

リサイズをする機能と、リサイズ時にコールバックする機能を提供する。

テンプレート引数
----------------

=================== ==============
引数名              意味
=================== ==============
``class Derived``   派生クラス
=================== ==============

メンバ
------

.. cpp:function:: bool WindowProc(HWND hwnd, UINT msg, WPARAM wParam, LPARAM lParam, LRESULT &lresult)

   ウィンドウプロシージャ。 `win32::window::WindowProc <window.hpp.html#WindowProc__HWND.UINT.WPARAM.LPARAM>`_ が呼び出す。

.. cpp:function:: void resize(int w, int h)

   ウィンドウをリサイズする。クライアント領域の大きさを指定する。

注意
----

* 派生クラスは ``Derived::on_size(int, int)`` を持たなければならない。

  * 派生クラスが direct2d::scene_manager 等を継承しても良い。

* ``Derived::on_size(int, int)`` でサイズ変更時の処理を行う。

例
--

* :ref:`ex-win32-window-size-move`

.. _win32-mover:

moverクラス
===========

宣言
----

.. sourcecode:: cpp

   template <class Derived>
   class mover;

概要
----

ウィンドウを移動する機能と、移動時にコールバックする機能を提供する。

テンプレート引数
----------------

=================== ==============
引数名              意味
=================== ==============
``class Derived``   派生クラス
=================== ==============

メンバ
------

.. cpp:function:: bool WindowProc(HWND hwnd, UINT msg, WPARAM wParam, LPARAM lParam, LRESULT &lresult)

   ウィンドウプロシージャ。 `win32::window::WindowProc <window.hpp.html#WindowProc__HWND.UINT.WPARAM.LPARAM>`_ が呼び出す。

.. cpp:function:: void resize(int x, int y)

   ウィンドウを移動する。

注意
----

* 派生クラスは ``Derived::on_move(int, int)`` を持たなければならない。
* ``Derived::on_move(int, int)`` で移動時の処理を行う。

例
--

* :ref:`ex-win32-window-size-move`


.. _win32-quit_on_close:

quit_on_closeクラス
===================

宣言
----

.. sourcecode:: cpp

   template <class Derived>
   class quit_on_close;

概要
----

ウィンドウを閉じた時にメッセージループを抜ける

テンプレート引数
----------------

=================== ==============
引数名              意味
=================== ==============
``class Derived``   派生クラス
=================== ==============

メンバ
------

.. cpp:function:: bool WindowProc(HWND hwnd, UINT msg, WPARAM wParam, LPARAM lParam, LRESULT &lresult)

   ウィンドウプロシージャ。 `win32::window::WindowProc <window.hpp.html#WindowProc__HWND.UINT.WPARAM.LPARAM>`_ が呼び出す。

例
--

* :ref:`ex-win32-simplest-window`
* :ref:`ex-win32-window-size-move`
* 等


.. _win32-left_button:

left_buttonクラス
=================

宣言
----

.. sourcecode:: cpp

   template <class Derived>
   class left_button;

概要
----

マウスの左クリックを検出してコールバックする機能を提供する。

テンプレート引数
----------------

=================== ==============
引数名              意味
=================== ==============
``class Derived``   派生クラス
=================== ==============

メンバ
------

.. cpp:function:: bool WindowProc(HWND hwnd, UINT msg, WPARAM wParam, LPARAM lParam, LRESULT &lresult)

   ウィンドウプロシージャ。 `win32::window::WindowProc <window.hpp.html#WindowProc__HWND.UINT.WPARAM.LPARAM>`_ が呼び出す。

注意
----

* 派生クラスは ``Derived::on_left_press(int, int)``, ``Derived::on_left_release(int, int)`` を持たなければならない。
* 通常は代わりに win32::object_processor を使う。


.. _win32-right_button:

right_buttonクラス
==================

宣言
----

.. sourcecode:: cpp

   template <class Derived>
   class right_button;

概要
----

マウスの右クリックを検出してコールバックする機能を提供する。

テンプレート引数
----------------

=================== ==============
引数名              意味
=================== ==============
``class Derived``   派生クラス
=================== ==============

メンバ
------

.. cpp:function:: bool WindowProc(HWND hwnd, UINT msg, WPARAM wParam, LPARAM lParam, LRESULT &lresult)

   ウィンドウプロシージャ。 `win32::window::WindowProc <window.hpp.html#WindowProc__HWND.UINT.WPARAM.LPARAM>`_ が呼び出す。

注意
----

* 派生クラスは ``Derived::on_right_press(int, int)``, ``Derived::on_right_release(int, int)`` を持たなければならない。


.. _win32-mouse_move:

mouse_moveクラス
================

宣言
----

.. sourcecode:: cpp

   template <class Derived>
   class mouse_move;

概要
----

マウスの移動を検出してコールバックする機能を提供する。

テンプレート引数
----------------

=================== ==============
引数名              意味
=================== ==============
``class Derived``   派生クラス
=================== ==============

メンバ
------

.. cpp:function:: bool WindowProc(HWND hwnd, UINT msg, WPARAM wParam, LPARAM lParam, LRESULT &lresult)

   ウィンドウプロシージャ。 `win32::window::WindowProc <window.hpp.html#WindowProc__HWND.UINT.WPARAM.LPARAM>`_ が呼び出す。

注意
----

* 派生クラスは ``Derived::on_mouse_move(int, int)`` を持たなければならない。
* 通常は代わりに win32::object_processor を使う。


.. _win32-keyboard:

keyboardクラス
==============

宣言
----

.. sourcecode:: cpp

   template <class Derived>
   class keyboard;

概要
----

キーボードの入力を検出してコールバックする機能を提供する。

テンプレート引数
----------------

=================== ==============
引数名              意味
=================== ==============
``class Derived``   派生クラス
=================== ==============

メンバ
------

.. cpp:type:: handler_type

   ``std::function<void(unsigned, bool)>`` の別名。1つ目の引数にはキーコード、2つ目の引数にはキーが押された時に ``true`` 、離した時に ``false`` が渡される。

.. cpp:type:: hash_type

   ハンドラの識別子。符号なし64bit

.. cpp:type:: keycode_range

   ``std::tuple<wchar_t, wchar_t>`` の別名。

.. cpp:function:: bool WindowProc(HWND hwnd, UINT msg, WPARAM wParam, LPARAM lParam, LRESULT &lresult)

   ウィンドウプロシージャ。 `win32::window::WindowProc <window.hpp.html#WindowProc__HWND.UINT.WPARAM.LPARAM>`_ が呼び出す。

.. cpp:function:: hash_type add_keyboard_handler(handler_type handler, Type t, Types... characters)

   ハンドラを追加する。1つ目の引数にキーが入力された時に呼ばれる関数オブジェクトを渡し、2つ目以降に検出したいキーコードを渡す。
   キーコードが連続する時には :cpp:type:`keycode_range` が使える。
   ハンドラの識別子を返す。

.. cpp:function:: void remove_keyboard_handler(hash_type hash, Types... characters)

   ハンドラを削除する。1つ目の引数に :cpp:func:`add_keyboard_handler` が返した値を、2つ目以降にキーコードを渡す。

例
--

* a


.. _win32-timer:

timerクラス
===========

宣言
----

.. sourcecode:: cpp

   template <class Derived>
   class timer;

概要
----

タイマーの制御を行う。WM_TIMERを利用する。

テンプレート引数
----------------

=================== ==============
引数名              意味
=================== ==============
``class Derived``   派生クラス
=================== ==============

メンバ
------

.. cpp:type:: handler_type

   ``std::function<void(unsigned)>`` の別名。引数はタイマーのIDを表す。

.. cpp:type:: hash_type

   ハンドラの識別子。符号なし64bit

.. cpp:function:: bool WindowProc(HWND hwnd, UINT msg, WPARAM wParam, LPARAM lParam, LRESULT &lresult)

   ウィンドウプロシージャ。 `win32::window::WindowProc <window.hpp.html#WindowProc__HWND.UINT.WPARAM.LPARAM>`_ が呼び出す。

.. cpp:function:: hash_type add_timer_handler(handler_type handler, Integer id, Integers... ids)

   ハンドラを追加する。1つ目の引数にタイマーが呼ばれた時に呼ばれる関数オブジェクトを、2つ目以降の引数に検出したいタイマーID(整数値)を渡す。
   ハンドラの識別子を返す。

.. cpp:function:: void remove_timer_handler(hash_type hash, Integers... ids)

   ハンドラを削除する。1つ目の引数に :cpp:func:`add_timer_handler` が返した値を、2つ目以降にタイマーIDを渡す。

例
--

* a